{"ast":null,"code":"import f, { createContext as m, useContext as D, useMemo as l, useState as P } from \"react\";\nimport { useId as T } from '../../hooks/use-id.js';\nimport { forwardRefWithAs as g, render as x } from '../../utils/render.js';\nimport { useIsoMorphicEffect as E } from '../../hooks/use-iso-morphic-effect.js';\nimport { useSyncRefs as h } from '../../hooks/use-sync-refs.js';\nimport { useEvent as v } from '../../hooks/use-event.js';\nlet d = m(null);\nfunction u() {\n  let r = D(d);\n  if (r === null) {\n    let t = new Error(\"You used a <Description /> component, but it is not inside a relevant parent.\");\n    throw Error.captureStackTrace && Error.captureStackTrace(t, u), t;\n  }\n  return r;\n}\nfunction k() {\n  let [r, t] = P([]);\n  return [r.length > 0 ? r.join(\" \") : void 0, l(() => function (e) {\n    let i = v(n => (t(o => [...o, n]), () => t(o => {\n        let c = o.slice(),\n          p = c.indexOf(n);\n        return p !== -1 && c.splice(p, 1), c;\n      }))),\n      s = l(() => ({\n        register: i,\n        slot: e.slot,\n        name: e.name,\n        props: e.props\n      }), [i, e.slot, e.name, e.props]);\n    return f.createElement(d.Provider, {\n      value: s\n    }, e.children);\n  }, [t])];\n}\nlet S = \"p\",\n  F = g(function (t, a) {\n    let e = u(),\n      i = `headlessui-description-${T()}`,\n      s = h(a);\n    E(() => e.register(i), [i, e.register]);\n    let n = t,\n      o = {\n        ref: s,\n        ...e.props,\n        id: i\n      };\n    return x({\n      ourProps: o,\n      theirProps: n,\n      slot: e.slot || {},\n      defaultTag: S,\n      name: e.name || \"Description\"\n    });\n  });\nexport { F as Description, k as useDescriptions };","map":null,"metadata":{},"sourceType":"module"}