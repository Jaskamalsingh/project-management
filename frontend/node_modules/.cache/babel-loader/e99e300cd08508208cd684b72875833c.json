{"ast":null,"code":"import S, { Fragment as w, createContext as I, useContext as L, useEffect as F, useMemo as g, useReducer as N, useRef as E } from \"react\";\nimport { match as O } from '../../utils/match.js';\nimport { forwardRefWithAs as k, render as M, Features as _ } from '../../utils/render.js';\nimport { optionalRef as G, useSyncRefs as x } from '../../hooks/use-sync-refs.js';\nimport { useId as K } from '../../hooks/use-id.js';\nimport { Keys as y } from '../keyboard.js';\nimport { isDisabledReactIssue7711 as W } from '../../utils/bugs.js';\nimport { OpenClosedProvider as $, State as v, useOpenClosed as q } from '../../internal/open-closed.js';\nimport { useResolveButtonType as z } from '../../hooks/use-resolve-button-type.js';\nimport { getOwnerDocument as J } from '../../utils/owner.js';\nimport { useEvent as R } from '../../hooks/use-event.js';\nvar Q = (o => (o[o.Open = 0] = \"Open\", o[o.Closed = 1] = \"Closed\", o))(Q || {}),\n  V = (n => (n[n.ToggleDisclosure = 0] = \"ToggleDisclosure\", n[n.CloseDisclosure = 1] = \"CloseDisclosure\", n[n.SetButtonId = 2] = \"SetButtonId\", n[n.SetPanelId = 3] = \"SetPanelId\", n[n.LinkPanel = 4] = \"LinkPanel\", n[n.UnlinkPanel = 5] = \"UnlinkPanel\", n))(V || {});\nlet X = {\n    [0]: e => ({\n      ...e,\n      disclosureState: O(e.disclosureState, {\n        [0]: 1,\n        [1]: 0\n      })\n    }),\n    [1]: e => e.disclosureState === 1 ? e : {\n      ...e,\n      disclosureState: 1\n    },\n    [4](e) {\n      return e.linkedPanel === !0 ? e : {\n        ...e,\n        linkedPanel: !0\n      };\n    },\n    [5](e) {\n      return e.linkedPanel === !1 ? e : {\n        ...e,\n        linkedPanel: !1\n      };\n    },\n    [2](e, t) {\n      return e.buttonId === t.buttonId ? e : {\n        ...e,\n        buttonId: t.buttonId\n      };\n    },\n    [3](e, t) {\n      return e.panelId === t.panelId ? e : {\n        ...e,\n        panelId: t.panelId\n      };\n    }\n  },\n  B = I(null);\nB.displayName = \"DisclosureContext\";\nfunction h(e) {\n  let t = L(B);\n  if (t === null) {\n    let o = new Error(`<${e} /> is missing a parent <Disclosure /> component.`);\n    throw Error.captureStackTrace && Error.captureStackTrace(o, h), o;\n  }\n  return t;\n}\nlet H = I(null);\nH.displayName = \"DisclosureAPIContext\";\nfunction j(e) {\n  let t = L(H);\n  if (t === null) {\n    let o = new Error(`<${e} /> is missing a parent <Disclosure /> component.`);\n    throw Error.captureStackTrace && Error.captureStackTrace(o, j), o;\n  }\n  return t;\n}\nlet U = I(null);\nU.displayName = \"DisclosurePanelContext\";\nfunction Y() {\n  return L(U);\n}\nfunction Z(e, t) {\n  return O(t.type, X, e, t);\n}\nlet ee = w,\n  te = k(function (t, o) {\n    let {\n        defaultOpen: l = !1,\n        ...i\n      } = t,\n      s = `headlessui-disclosure-button-${K()}`,\n      n = `headlessui-disclosure-panel-${K()}`,\n      u = E(null),\n      D = x(o, G(f => {\n        u.current = f;\n      }, t.as === void 0 || t.as === w)),\n      T = E(null),\n      m = E(null),\n      c = N(Z, {\n        disclosureState: l ? 0 : 1,\n        linkedPanel: !1,\n        buttonRef: m,\n        panelRef: T,\n        buttonId: s,\n        panelId: n\n      }),\n      [{\n        disclosureState: p\n      }, a] = c;\n    F(() => a({\n      type: 2,\n      buttonId: s\n    }), [s, a]), F(() => a({\n      type: 3,\n      panelId: n\n    }), [n, a]);\n    let P = R(f => {\n        a({\n          type: 1\n        });\n        let C = J(u);\n        if (!C) return;\n        let A = (() => f ? f instanceof HTMLElement ? f : f.current instanceof HTMLElement ? f.current : C.getElementById(s) : C.getElementById(s))();\n        A == null || A.focus();\n      }),\n      b = g(() => ({\n        close: P\n      }), [P]),\n      r = g(() => ({\n        open: p === 0,\n        close: P\n      }), [p, P]),\n      d = {\n        ref: D\n      };\n    return S.createElement(B.Provider, {\n      value: c\n    }, S.createElement(H.Provider, {\n      value: b\n    }, S.createElement($, {\n      value: O(p, {\n        [0]: v.Open,\n        [1]: v.Closed\n      })\n    }, M({\n      ourProps: d,\n      theirProps: i,\n      slot: r,\n      defaultTag: ee,\n      name: \"Disclosure\"\n    }))));\n  }),\n  ne = \"button\",\n  le = k(function (t, o) {\n    let [l, i] = h(\"Disclosure.Button\"),\n      s = Y(),\n      n = s === null ? !1 : s === l.panelId,\n      u = E(null),\n      D = x(u, o, n ? null : l.buttonRef),\n      T = R(r => {\n        var d;\n        if (n) {\n          if (l.disclosureState === 1) return;\n          switch (r.key) {\n            case y.Space:\n            case y.Enter:\n              r.preventDefault(), r.stopPropagation(), i({\n                type: 0\n              }), (d = l.buttonRef.current) == null || d.focus();\n              break;\n          }\n        } else switch (r.key) {\n          case y.Space:\n          case y.Enter:\n            r.preventDefault(), r.stopPropagation(), i({\n              type: 0\n            });\n            break;\n        }\n      }),\n      m = R(r => {\n        switch (r.key) {\n          case y.Space:\n            r.preventDefault();\n            break;\n        }\n      }),\n      c = R(r => {\n        var d;\n        W(r.currentTarget) || t.disabled || (n ? (i({\n          type: 0\n        }), (d = l.buttonRef.current) == null || d.focus()) : i({\n          type: 0\n        }));\n      }),\n      p = g(() => ({\n        open: l.disclosureState === 0\n      }), [l]),\n      a = z(t, u),\n      P = t,\n      b = n ? {\n        ref: D,\n        type: a,\n        onKeyDown: T,\n        onClick: c\n      } : {\n        ref: D,\n        id: l.buttonId,\n        type: a,\n        \"aria-expanded\": t.disabled ? void 0 : l.disclosureState === 0,\n        \"aria-controls\": l.linkedPanel ? l.panelId : void 0,\n        onKeyDown: T,\n        onKeyUp: m,\n        onClick: c\n      };\n    return M({\n      ourProps: b,\n      theirProps: P,\n      slot: p,\n      defaultTag: ne,\n      name: \"Disclosure.Button\"\n    });\n  }),\n  oe = \"div\",\n  re = _.RenderStrategy | _.Static,\n  se = k(function (t, o) {\n    let [l, i] = h(\"Disclosure.Panel\"),\n      {\n        close: s\n      } = j(\"Disclosure.Panel\"),\n      n = x(o, l.panelRef, p => {\n        i({\n          type: p ? 4 : 5\n        });\n      }),\n      u = q(),\n      D = (() => u !== null ? u === v.Open : l.disclosureState === 0)(),\n      T = g(() => ({\n        open: l.disclosureState === 0,\n        close: s\n      }), [l, s]),\n      m = t,\n      c = {\n        ref: n,\n        id: l.panelId\n      };\n    return S.createElement(U.Provider, {\n      value: l.panelId\n    }, M({\n      ourProps: c,\n      theirProps: m,\n      slot: T,\n      defaultTag: oe,\n      features: re,\n      visible: D,\n      name: \"Disclosure.Panel\"\n    }));\n  }),\n  Oe = Object.assign(te, {\n    Button: le,\n    Panel: se\n  });\nexport { Oe as Disclosure };","map":null,"metadata":{},"sourceType":"module"}