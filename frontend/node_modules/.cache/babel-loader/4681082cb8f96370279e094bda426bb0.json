{"ast":null,"code":"import { getOwnerDocument as s } from '../utils/owner.js';\nimport { useIsoMorphicEffect as d } from './use-iso-morphic-effect.js';\nlet i = new Set(),\n  r = new Map();\nfunction u(t) {\n  t.setAttribute(\"aria-hidden\", \"true\"), t.inert = !0;\n}\nfunction l(t) {\n  let n = r.get(t);\n  !n || (n[\"aria-hidden\"] === null ? t.removeAttribute(\"aria-hidden\") : t.setAttribute(\"aria-hidden\", n[\"aria-hidden\"]), t.inert = n.inert);\n}\nfunction M(t, n = !0) {\n  d(() => {\n    if (!n || !t.current) return;\n    let o = t.current,\n      a = s(o);\n    if (!!a) {\n      i.add(o);\n      for (let e of r.keys()) e.contains(o) && (l(e), r.delete(e));\n      return a.querySelectorAll(\"body > *\").forEach(e => {\n        if (e instanceof HTMLElement) {\n          for (let f of i) if (e.contains(f)) return;\n          i.size === 1 && (r.set(e, {\n            \"aria-hidden\": e.getAttribute(\"aria-hidden\"),\n            inert: e.inert\n          }), u(e));\n        }\n      }), () => {\n        if (i.delete(o), i.size > 0) a.querySelectorAll(\"body > *\").forEach(e => {\n          if (e instanceof HTMLElement && !r.has(e)) {\n            for (let f of i) if (e.contains(f)) return;\n            r.set(e, {\n              \"aria-hidden\": e.getAttribute(\"aria-hidden\"),\n              inert: e.inert\n            }), u(e);\n          }\n        });else for (let e of r.keys()) l(e), r.delete(e);\n      };\n    }\n  }, [n]);\n}\nexport { M as useInertOthers };","map":null,"metadata":{},"sourceType":"module"}