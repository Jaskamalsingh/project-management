{"ast":null,"code":"import g, { createContext as re, useContext as oe, useMemo as C, useReducer as ne, useRef as j } from \"react\";\nimport { forwardRefWithAs as V, render as J, compact as ie } from '../../utils/render.js';\nimport { useId as q } from '../../hooks/use-id.js';\nimport { match as ae } from '../../utils/match.js';\nimport { useIsoMorphicEffect as B } from '../../hooks/use-iso-morphic-effect.js';\nimport { Keys as v } from '../../components/keyboard.js';\nimport { focusIn as Q, Focus as I, FocusResult as X, sortByDomNode as le } from '../../utils/focus-management.js';\nimport { useFlags as pe } from '../../hooks/use-flags.js';\nimport { Label as se, useLabels as Y } from '../../components/label/label.js';\nimport { Description as ue, useDescriptions as Z } from '../../components/description/description.js';\nimport { useTreeWalker as de } from '../../hooks/use-tree-walker.js';\nimport { useSyncRefs as z } from '../../hooks/use-sync-refs.js';\nimport { Hidden as ce, Features as fe } from '../../internal/hidden.js';\nimport { attemptSubmit as Te, objectToFormEntries as me } from '../../utils/form.js';\nimport { getOwnerDocument as be } from '../../utils/owner.js';\nimport { useEvent as b } from '../../hooks/use-event.js';\nimport { useControllable as Re } from '../../hooks/use-controllable.js';\nimport { isDisabledReactIssue7711 as ee } from '../../utils/bugs.js';\nvar ye = (t => (t[t.RegisterOption = 0] = \"RegisterOption\", t[t.UnregisterOption = 1] = \"UnregisterOption\", t))(ye || {});\nlet ge = {\n    [0](a, n) {\n      let t = [...a.options, {\n        id: n.id,\n        element: n.element,\n        propsRef: n.propsRef\n      }];\n      return {\n        ...a,\n        options: le(t, l => l.element.current)\n      };\n    },\n    [1](a, n) {\n      let t = a.options.slice(),\n        l = a.options.findIndex(O => O.id === n.id);\n      return l === -1 ? a : (t.splice(l, 1), {\n        ...a,\n        options: t\n      });\n    }\n  },\n  $ = re(null);\n$.displayName = \"RadioGroupContext\";\nfunction te(a) {\n  let n = oe($);\n  if (n === null) {\n    let t = new Error(`<${a} /> is missing a parent <RadioGroup /> component.`);\n    throw Error.captureStackTrace && Error.captureStackTrace(t, te), t;\n  }\n  return n;\n}\nfunction ve(a, n) {\n  return ae(n.type, ge, a, n);\n}\nlet Oe = \"div\",\n  Ee = V(function (n, t) {\n    let {\n        value: l,\n        defaultValue: O,\n        name: c,\n        onChange: M,\n        by: E = (e, r) => e === r,\n        disabled: P = !1,\n        ...S\n      } = n,\n      u = b(typeof E == \"string\" ? (e, r) => {\n        let o = E;\n        return (e == null ? void 0 : e[o]) === (r == null ? void 0 : r[o]);\n      } : E),\n      [_, A] = ne(ve, {\n        options: []\n      }),\n      i = _.options,\n      [R, U] = Y(),\n      [f, D] = Z(),\n      H = `headlessui-radiogroup-${q()}`,\n      h = j(null),\n      G = z(h, t),\n      [p, k] = Re(l, M, O),\n      F = C(() => i.find(e => !e.propsRef.current.disabled), [i]),\n      L = C(() => i.some(e => u(e.propsRef.current.value, p)), [i, p]),\n      T = b(e => {\n        var o;\n        if (P || u(e, p)) return !1;\n        let r = (o = i.find(w => u(w.propsRef.current.value, e))) == null ? void 0 : o.propsRef.current;\n        return r != null && r.disabled ? !1 : (k == null || k(e), !0);\n      });\n    de({\n      container: h.current,\n      accept(e) {\n        return e.getAttribute(\"role\") === \"radio\" ? NodeFilter.FILTER_REJECT : e.hasAttribute(\"role\") ? NodeFilter.FILTER_SKIP : NodeFilter.FILTER_ACCEPT;\n      },\n      walk(e) {\n        e.setAttribute(\"role\", \"none\");\n      }\n    });\n    let N = b(e => {\n        let r = h.current;\n        if (!r) return;\n        let o = be(r),\n          w = i.filter(d => d.propsRef.current.disabled === !1).map(d => d.element.current);\n        switch (e.key) {\n          case v.Enter:\n            Te(e.currentTarget);\n            break;\n          case v.ArrowLeft:\n          case v.ArrowUp:\n            if (e.preventDefault(), e.stopPropagation(), Q(w, I.Previous | I.WrapAround) === X.Success) {\n              let m = i.find(K => K.element.current === (o == null ? void 0 : o.activeElement));\n              m && T(m.propsRef.current.value);\n            }\n            break;\n          case v.ArrowRight:\n          case v.ArrowDown:\n            if (e.preventDefault(), e.stopPropagation(), Q(w, I.Next | I.WrapAround) === X.Success) {\n              let m = i.find(K => K.element.current === (o == null ? void 0 : o.activeElement));\n              m && T(m.propsRef.current.value);\n            }\n            break;\n          case v.Space:\n            {\n              e.preventDefault(), e.stopPropagation();\n              let d = i.find(m => m.element.current === (o == null ? void 0 : o.activeElement));\n              d && T(d.propsRef.current.value);\n            }\n            break;\n        }\n      }),\n      x = b(e => (A({\n        type: 0,\n        ...e\n      }), () => A({\n        type: 1,\n        id: e.id\n      }))),\n      s = C(() => ({\n        registerOption: x,\n        firstOption: F,\n        containsCheckedOption: L,\n        change: T,\n        disabled: P,\n        value: p,\n        compare: u\n      }), [x, F, L, T, P, p, u]),\n      y = {\n        ref: G,\n        id: H,\n        role: \"radiogroup\",\n        \"aria-labelledby\": R,\n        \"aria-describedby\": f,\n        onKeyDown: N\n      },\n      W = C(() => ({\n        value: p\n      }), [p]);\n    return g.createElement(D, {\n      name: \"RadioGroup.Description\"\n    }, g.createElement(U, {\n      name: \"RadioGroup.Label\"\n    }, g.createElement($.Provider, {\n      value: s\n    }, c != null && p != null && me({\n      [c]: p\n    }).map(([e, r]) => g.createElement(ce, {\n      features: fe.Hidden,\n      ...ie({\n        key: e,\n        as: \"input\",\n        type: \"radio\",\n        checked: r != null,\n        hidden: !0,\n        readOnly: !0,\n        name: e,\n        value: r\n      })\n    })), J({\n      ourProps: y,\n      theirProps: S,\n      slot: W,\n      defaultTag: Oe,\n      name: \"RadioGroup\"\n    }))));\n  });\nvar Pe = (t => (t[t.Empty = 1] = \"Empty\", t[t.Active = 2] = \"Active\", t))(Pe || {});\nlet Ae = \"div\",\n  he = V(function (n, t) {\n    let l = j(null),\n      O = z(l, t),\n      c = `headlessui-radiogroup-option-${q()}`,\n      [M, E] = Y(),\n      [P, S] = Z(),\n      {\n        addFlag: u,\n        removeFlag: _,\n        hasFlag: A\n      } = pe(1),\n      {\n        value: i,\n        disabled: R = !1,\n        ...U\n      } = n,\n      f = j({\n        value: i,\n        disabled: R\n      });\n    B(() => {\n      f.current.value = i;\n    }, [i, f]), B(() => {\n      f.current.disabled = R;\n    }, [R, f]);\n    let {\n      registerOption: D,\n      disabled: H,\n      change: h,\n      firstOption: G,\n      containsCheckedOption: p,\n      value: k,\n      compare: F\n    } = te(\"RadioGroup.Option\");\n    B(() => D({\n      id: c,\n      element: l,\n      propsRef: f\n    }), [c, D, l, n]);\n    let L = b(r => {\n        var o;\n        if (ee(r.currentTarget)) return r.preventDefault();\n        !h(i) || (u(2), (o = l.current) == null || o.focus());\n      }),\n      T = b(r => {\n        if (ee(r.currentTarget)) return r.preventDefault();\n        u(2);\n      }),\n      N = b(() => _(2)),\n      x = (G == null ? void 0 : G.id) === c,\n      s = H || R,\n      y = F(k, i),\n      W = {\n        ref: O,\n        id: c,\n        role: \"radio\",\n        \"aria-checked\": y ? \"true\" : \"false\",\n        \"aria-labelledby\": M,\n        \"aria-describedby\": P,\n        \"aria-disabled\": s ? !0 : void 0,\n        tabIndex: (() => s ? -1 : y || !p && x ? 0 : -1)(),\n        onClick: s ? void 0 : L,\n        onFocus: s ? void 0 : T,\n        onBlur: s ? void 0 : N\n      },\n      e = C(() => ({\n        checked: y,\n        disabled: s,\n        active: A(2)\n      }), [y, s, A]);\n    return g.createElement(S, {\n      name: \"RadioGroup.Description\"\n    }, g.createElement(E, {\n      name: \"RadioGroup.Label\"\n    }, J({\n      ourProps: W,\n      theirProps: U,\n      slot: e,\n      defaultTag: Ae,\n      name: \"RadioGroup.Option\"\n    })));\n  }),\n  et = Object.assign(Ee, {\n    Option: he,\n    Label: se,\n    Description: ue\n  });\nexport { et as RadioGroup };","map":null,"metadata":{},"sourceType":"module"}