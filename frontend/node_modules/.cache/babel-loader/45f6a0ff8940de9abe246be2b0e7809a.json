{"ast":null,"code":"import l, { Fragment as L, createContext as R, useContext as A, useMemo as S, useRef as H, useState as G } from \"react\";\nimport { forwardRefWithAs as K, render as E, compact as M } from '../../utils/render.js';\nimport { useId as x } from '../../hooks/use-id.js';\nimport { Keys as w } from '../keyboard.js';\nimport { isDisabledReactIssue7711 as U } from '../../utils/bugs.js';\nimport { Label as _, useLabels as F } from '../label/label.js';\nimport { Description as B, useDescriptions as I } from '../description/description.js';\nimport { useResolveButtonType as O } from '../../hooks/use-resolve-button-type.js';\nimport { useSyncRefs as W } from '../../hooks/use-sync-refs.js';\nimport { Hidden as j, Features as N } from '../../internal/hidden.js';\nimport { attemptSubmit as $ } from '../../utils/form.js';\nimport { useEvent as c } from '../../hooks/use-event.js';\nimport { useControllable as q } from '../../hooks/use-controllable.js';\nlet h = R(null);\nh.displayName = \"GroupContext\";\nlet z = L;\nfunction J(b) {\n  let [t, o] = G(null),\n    [i, d] = F(),\n    [a, s] = I(),\n    u = S(() => ({\n      switch: t,\n      setSwitch: o,\n      labelledby: i,\n      describedby: a\n    }), [t, o, i, a]),\n    p = {},\n    m = b;\n  return l.createElement(s, {\n    name: \"Switch.Description\"\n  }, l.createElement(d, {\n    name: \"Switch.Label\",\n    props: {\n      onClick() {\n        !t || (t.click(), t.focus({\n          preventScroll: !0\n        }));\n      }\n    }\n  }, l.createElement(h.Provider, {\n    value: u\n  }, E({\n    ourProps: p,\n    theirProps: m,\n    defaultTag: z,\n    name: \"Switch.Group\"\n  }))));\n}\nlet Q = \"button\",\n  V = K(function (t, o) {\n    let {\n        checked: i,\n        defaultChecked: d = !1,\n        onChange: a,\n        name: s,\n        value: u,\n        ...p\n      } = t,\n      m = `headlessui-switch-${x()}`,\n      r = A(h),\n      y = H(null),\n      P = W(y, o, r === null ? null : r.setSwitch),\n      [n, f] = q(i, a, d),\n      T = c(() => f == null ? void 0 : f(!n)),\n      v = c(e => {\n        if (U(e.currentTarget)) return e.preventDefault();\n        e.preventDefault(), T();\n      }),\n      k = c(e => {\n        e.key === w.Space ? (e.preventDefault(), T()) : e.key === w.Enter && $(e.currentTarget);\n      }),\n      g = c(e => e.preventDefault()),\n      C = S(() => ({\n        checked: n\n      }), [n]),\n      D = {\n        id: m,\n        ref: P,\n        role: \"switch\",\n        type: O(t, y),\n        tabIndex: 0,\n        \"aria-checked\": n,\n        \"aria-labelledby\": r == null ? void 0 : r.labelledby,\n        \"aria-describedby\": r == null ? void 0 : r.describedby,\n        onClick: v,\n        onKeyUp: k,\n        onKeyPress: g\n      };\n    return l.createElement(l.Fragment, null, s != null && n && l.createElement(j, {\n      features: N.Hidden,\n      ...M({\n        as: \"input\",\n        type: \"checkbox\",\n        hidden: !0,\n        readOnly: !0,\n        checked: n,\n        name: s,\n        value: u\n      })\n    }), E({\n      ourProps: D,\n      theirProps: p,\n      slot: C,\n      defaultTag: Q,\n      name: \"Switch\"\n    }));\n  }),\n  be = Object.assign(V, {\n    Group: J,\n    Label: _,\n    Description: B\n  });\nexport { be as Switch };","map":null,"metadata":{},"sourceType":"module"}