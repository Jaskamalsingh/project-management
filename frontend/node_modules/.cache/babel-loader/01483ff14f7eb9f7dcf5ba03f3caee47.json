{"ast":null,"code":"import { microTask as s } from './micro-task.js';\nfunction m() {\n  let n = [],\n    i = [],\n    r = {\n      enqueue(e) {\n        i.push(e);\n      },\n      addEventListener(e, t, a, o) {\n        return e.addEventListener(t, a, o), r.add(() => e.removeEventListener(t, a, o));\n      },\n      requestAnimationFrame(...e) {\n        let t = requestAnimationFrame(...e);\n        return r.add(() => cancelAnimationFrame(t));\n      },\n      nextFrame(...e) {\n        return r.requestAnimationFrame(() => r.requestAnimationFrame(...e));\n      },\n      setTimeout(...e) {\n        let t = setTimeout(...e);\n        return r.add(() => clearTimeout(t));\n      },\n      microTask(...e) {\n        let t = {\n          current: !0\n        };\n        return s(() => {\n          t.current && e[0]();\n        }), r.add(() => {\n          t.current = !1;\n        });\n      },\n      add(e) {\n        return n.push(e), () => {\n          let t = n.indexOf(e);\n          if (t >= 0) {\n            let [a] = n.splice(t, 1);\n            a();\n          }\n        };\n      },\n      dispose() {\n        for (let e of n.splice(0)) e();\n      },\n      async workQueue() {\n        for (let e of i.splice(0)) await e();\n      }\n    };\n  return r;\n}\nexport { m as disposables };","map":null,"metadata":{},"sourceType":"module"}