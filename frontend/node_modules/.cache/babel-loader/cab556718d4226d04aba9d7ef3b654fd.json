{"ast":null,"code":"import p, { createContext as m, useContext as L, useMemo as f, useState as b } from \"react\";\nimport { useId as g } from '../../hooks/use-id.js';\nimport { forwardRefWithAs as x, render as T } from '../../utils/render.js';\nimport { useIsoMorphicEffect as E } from '../../hooks/use-iso-morphic-effect.js';\nimport { useSyncRefs as P } from '../../hooks/use-sync-refs.js';\nimport { useEvent as v } from '../../hooks/use-event.js';\nlet u = m(null);\nfunction c() {\n  let o = L(u);\n  if (o === null) {\n    let t = new Error(\"You used a <Label /> component, but it is not inside a relevant parent.\");\n    throw Error.captureStackTrace && Error.captureStackTrace(t, c), t;\n  }\n  return o;\n}\nfunction M() {\n  let [o, t] = b([]);\n  return [o.length > 0 ? o.join(\" \") : void 0, f(() => function (e) {\n    let l = v(a => (t(i => [...i, a]), () => t(i => {\n        let n = i.slice(),\n          d = n.indexOf(a);\n        return d !== -1 && n.splice(d, 1), n;\n      }))),\n      r = f(() => ({\n        register: l,\n        slot: e.slot,\n        name: e.name,\n        props: e.props\n      }), [l, e.slot, e.name, e.props]);\n    return p.createElement(u.Provider, {\n      value: r\n    }, e.children);\n  }, [t])];\n}\nlet h = \"label\",\n  F = x(function (t, s) {\n    let {\n        passive: e = !1,\n        ...l\n      } = t,\n      r = c(),\n      a = `headlessui-label-${g()}`,\n      i = P(s);\n    E(() => r.register(a), [a, r.register]);\n    let n = {\n      ref: i,\n      ...r.props,\n      id: a\n    };\n    return e && (\"onClick\" in n && delete n.onClick, \"onClick\" in l && delete l.onClick), T({\n      ourProps: n,\n      theirProps: l,\n      slot: r.slot || {},\n      defaultTag: h,\n      name: r.name || \"Label\"\n    });\n  });\nexport { F as Label, M as useLabels };","map":null,"metadata":{},"sourceType":"module"}